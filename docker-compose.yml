services:
  server:
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    container_name: server
    volumes:
      - .:/app
      - /app/node_modules
      - pnpm-store:/root/.local/share/pnpm/store
    ports:
      - "${PORT:-3000}:3000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - REDIS_HOST=redis
      - NODE_ENV=development
    networks:
      - service-network

  db:
    image: mongo:7
    command: ["--replSet", "rs0", "--bind_ip_all"]
    container_name: "mongo" 
    ports:
      - "${DB_PORT}:27017"
    restart: unless-stopped
    volumes:
      - db-data:/data/db
    networks:
      - service-network
    healthcheck:
      test: >
        echo "try { rs.status() } catch (err) {
          rs.initiate({_id:'rs0',members:[{_id:0,host:'db:27017'}]})
        }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 10s
      retries: 20

  redis:
    image: redis:7-alpine
    container_name: redis 
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - service-network

networks:
  service-network:
    driver: bridge

volumes:
  db-data:
  pnpm-store: